CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,            -- Auto-incremented ID for each user
  email VARCHAR(255) NOT NULL UNIQUE,           -- User's email (unique)
  password VARCHAR(255) NOT NULL,               -- Hashed password for security
  is_premium BOOLEAN DEFAULT FALSE,
  activation_token VARCHAR(255),                -- Token for email activation
  is_active BOOLEAN DEFAULT FALSE,              -- Flag to indicate if the user is activated
  reset_token VARCHAR(255),                     -- Token for password reset requests
  reset_token_expiry DATETIME,                  -- Expiry time for the reset token
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for user creation
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Timestamp for updates
);


CREATE TABLE user_profiles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    profile_image VARCHAR(255),
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    contact_email VARCHAR(255),
    date_of_birth DATE,
    address VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    zip_code VARCHAR(20),
    short_description TEXT,
    long_description TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE user_availability (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    availability VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE keywords (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE user_interests (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  category_id INT,
  keyword_id INT,
  interest_type ENUM('category', 'keyword') NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE,
  FOREIGN KEY (keyword_id) REFERENCES keywords(id) ON DELETE CASCADE,
  CONSTRAINT FK_interest_category FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE,
  CONSTRAINT FK_interest_keyword FOREIGN KEY (keyword_id) REFERENCES keywords(id) ON DELETE CASCADE
);

CREATE TABLE user_portfolio (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(100) NOT NULL,
    description TEXT,
    video LONGBLOB, -- Store the video data directly (if applicable)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for portfolio creation
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp for updates
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);



CREATE TABLE portfolio_keywords (
    id INT AUTO_INCREMENT PRIMARY KEY,            -- Unique identifier for each keyword entry
    portfolio_id INT NOT NULL,                     -- References the portfolio item
    keyword VARCHAR(100) NOT NULL,                 -- The keyword itself

    -- Foreign key that references the 'id' column in 'user_portfolio'
    FOREIGN KEY (portfolio_id) REFERENCES user_portfolio(id) ON DELETE CASCADE
);

CREATE TABLE portfolio_images (
    id INT AUTO_INCREMENT PRIMARY KEY,
    portfolio_id INT NOT NULL,      -- References the portfolio entry
    image BLOB NOT NULL,            -- Store the image data directly
    FOREIGN KEY (portfolio_id) REFERENCES user_portfolio(id) ON DELETE CASCADE
);




const express = require("express");
const app = express();
const PORT = process.env.PORT || 3002;

app.use(express.json());

app.get("/", (req, res) => {
  res.send("Nodejs");
});

app.listen(PORT, () => {
  console.log(`Server is running on http://127.0.0.1:${PORT}`);
});

{
  "email": "example@example.com",
  "password": "userpassword",
  "profileImage": "http://example.com/profile.jpg",
  "firstName": "John",
  "lastName": "Doe",
  "contactEmail": "contact@example.com",
  "dateOfBirth": "1990-01-01",
  "address": "123 Main St",
  "city": "Anytown",
  "state": "CA",
  "zipCode": "12345",
  "shortDescription": "A short bio",
  "longDescription": "A long bio describing the user",
  "availability": "Full-time",
  "categories": ["Web Development", "Data Science"],
  "keywords": ["JavaScript", "Node.js"]
}



